@page "/approvals/newRegularVacationApplication"
@using ApplicationOffice.Web.UI.Approvals.Models
@using System.ComponentModel.DataAnnotations
@using ApplicationOffice.Web.UI.Approvals.Enums
@using ApplicationOffice.Web.UI.Configurations
@using ApplicationOffice.Web.UI.Tools
@inject HttpClient _httpClient
@inject NavigationManager _navigation
@inject IMatToaster _toaster
@inject ApprovalsApiOptions _approvalsApiOptions
@attribute [Authorize]

<MatH4>Заявка на регулярный отпуск</MatH4>

<MatHeadline5>Согласующие:</MatHeadline5>
@if (UnitApprovers is null)
{
    <p>
        <em>Загрузка согласующих</em>
    </p>
    <MatProgressBar Indeterminate="true"/>
}
else if (!UnitApprovers.Any())
{
    <MatH5>Для вашего отдела не указаны согласующие: обратитесь в техническую поддержку.</MatH5>
}
else
{
    foreach (var unitApprover in UnitApprovers)
    {
        <UserCard UserId="@unitApprover.Approver.Id" Name="@unitApprover.Approver.Name" UnitId="@unitApprover.UnitId" Position="@unitApprover.Title"/>
    }
}

<MatHeadline5>Укажите информацию:</MatHeadline5>

<EditForm Model="NewRequest" OnValidSubmit="Success">
    <DataAnnotationsValidator/>
    <p>
        <MatDatePicker Label="Дата начала отпуска" @bind-Value="NewRequest.VacationFrom"/>
    </p>
    <p>
        <MatDatePicker Label="Дата окончания отпуска" @bind-Value="NewRequest.VacationTo"/>
    </p>
    <p>
        <MatTextField Label="Описание" @bind-Value="NewRequest.Description" TextArea="true" Dense="true"/>
    </p>
    <MatDivider/>
    <ValidationSummary/>
    <br/>
    <MatButton Type="submit" Raised="true" Disabled="@(UnitApprovers?.Any() != true)">Создать</MatButton>
    <MatButton Raised="true" OnClick="Cancel">Отмена</MatButton>
</EditForm>

@code {

        private const ApplicationType ApplicationType = UI.Approvals.Enums.ApplicationType.RegularVacation;
    private UnitApproverApiModel[]? UnitApprovers { get; set; }
    private FullUserApiModel? CurrentUser { get; set; }

    private CreateRegularVacationApplicationCommand NewRequest { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        CurrentUser = await _httpClient.GetFromJsonAsync<FullUserApiModel>(
            new Uri(_approvalsApiOptions.Address, "api/v1/user"));

        if (CurrentUser is not null)
            UnitApprovers = await _httpClient.GetFromJsonAsync<UnitApproverApiModel[]>(
                new Uri(
                    _approvalsApiOptions.Address,
                    $"api/v1/unitapprover/{CurrentUser.UnitId}?applicationType={ApplicationType}"));
    }

    private async Task Success()
    {
        var resp = await _httpClient.PostAsJsonAsync(
            new Uri(_approvalsApiOptions.Address, "api/v1/application"), NewRequest);
        var error = await resp.Validate();

        if (error is not null)
        {
            _toaster.Add(error.Message, MatToastType.Danger);
            return;
        }

        _toaster.Add("Заявка была успешно создана", MatToastType.Success);
        _navigation.NavigateTo(_navigation.BaseUri);
    }

    private void Cancel()
    {
        _navigation.NavigateTo(_navigation.BaseUri);
    }

    public class CreateRegularVacationApplicationCommand : IValidatableObject
    {
        public string? Description { get; set; }
        public DateTime? VacationFrom { get; set; }
        public DateTime? VacationTo { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Description is null)
                yield return new ValidationResult("Необходимо заполнить описание");
            if (!VacationFrom.HasValue)
                yield return new ValidationResult("Необходимо указать дату начала отпуска");
            if (VacationFrom.HasValue && VacationFrom.Value.Date <= DateTime.UtcNow.Date)
                yield return new ValidationResult("Неверная дата начала отпуска");
            if (!VacationTo.HasValue)
                yield return new ValidationResult("Необходимо указать дату окончания отпуска");
            if (VacationTo.HasValue && VacationTo.Value.Date < VacationFrom)
                yield return new ValidationResult("Неверная дата окончания отпуска");
        }
    }

}
