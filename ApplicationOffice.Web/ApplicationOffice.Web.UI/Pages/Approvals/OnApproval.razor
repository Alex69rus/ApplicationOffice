@page "/approvals/onApproval"
@using ApplicationOffice.Web.UI.Approvals.Models
@using ApplicationOffice.Web.UI.Configurations
@inject HttpClient _httpClient
@inject NavigationManager _navigation
@inject ApprovalsApiOptions _approvalsApiOptions
@attribute [Authorize]

<h1>Заявления на согласовании</h1>

@if (_applications == null)
{
    <p>
        <em>Загрузка заявлений...</em>
    </p>
    <MatProgressBar Indeterminate="true"></MatProgressBar>
    return;
}
@if (!_applications.Any())
{
    <p>
        <em>Здесь будут появляться заявления которые вам необходимо согласовать.</em>
    </p>
    return;
}

<MatTable Items="_applications" class="mat-elevation-z5" OnRowDbClick="OnApplicationClicked"
          PageLabel="Страница" PageRecordCountLabel="Количество элементов" AllowSelection="true">
    <MatTableHeader>
        <th>№</th>
        <th>Статус</th>
        <th style="width: 15%">Согласовать до</th>
        <th>Тип</th>
        <th>Наименование</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.Id</td>
        <td>
            <ApplicationStatusLabel Status="@context.Status"/>
        </td>
        @if (IsDateExpired(context.DueDate))
        {
            <td style="color:red;">@context.DueDate.ToString("dd.MM.yyyy")</td>
        }
        else
        {
            <td>@context.DueDate.ToString("dd.MM.yyyy")</td>
        }
        <td>
            <ApplicationTypeLabel Type="@context.Type"/>
        </td>
        <td>@context.Title</td>
    </MatTableRow>
</MatTable>


@code {
    private ApplicationViewResponse[]? _applications;

    protected override async Task OnInitializedAsync()
    {
        _applications = await _httpClient.GetFromJsonAsync<ApplicationViewResponse[]>(
            new Uri(_approvalsApiOptions.Address, "api/v1/application/onapproval?approverStatuses=New"));
    }

    private void OnApplicationClicked(object item)
    {
        if (item is ApplicationViewResponse application)
        {
            _navigation.NavigateTo($"approvals/applicationDetails/{application.Id}");
        }
    }

    private static bool IsDateExpired(DateTime date) => DateTime.UtcNow.Date > date.ToUniversalTime().Date;
}
