@page "/approvals/applicationDetails/{applicationId:long}"
@using ApplicationOffice.Web.UI.Approvals.Models
@using ApplicationOffice.Web.UI.Configurations
@using ApplicationOffice.Web.UI.Tools
@using ApplicationOffice.Web.UI.Approvals.Enums
@inject HttpClient _httpClient
@inject NavigationManager _navigation
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IMatToaster _toaster
@inject ApprovalsApiOptions _approvalsApiOptions
@attribute [Authorize]

@if (_details is null || _approvers is null)
{
    <p>
        <em>Загрузка заявления...</em>
    </p>
    <MatProgressBar Indeterminate="true"></MatProgressBar>

    return;
}

<div class="container float-left">
    <div class="row">
        <div class="col-md-10">
            <MatH4>Заявление: @_details.Title</MatH4>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <MatH5>Статус: <ApplicationStatusLabel Status="_details.Status"/></MatH5>
        </div>
    </div>
    <div class="row">
        <div class="col-md-10">
            <table class="table table-hover">
                <colgroup>
                    <col class="col-md-3">
                    <col class="col-md-7">
                </colgroup>
                <tbody>
                <tr>
                    <td>Согласовать до</td>
                    <td>@_details.DueDate.ToString("dd.MM.yyyy")</td>
                </tr>
                @foreach (var field in _details.Fields)
                {
                    <tr>
                        <td>@field.Title</td>
                        <td>
                            <ApplicationFieldValue Type="@field.Type" Value="@field.Value"/>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <div class="row">

        @foreach (var approver in _approvers)
        {
            <div class="col-md-5">
                <ApproverCard Name="@approver.User.Name" UserId="@approver.User.Id" Position="@approver.Title" Status="@approver.Status"/>
            </div>
        }
    </div>

    @if (_isApprover)
    {
        <br/>
        <div class="row">
            <div class="col-md-2">
                <MatButton Disabled="@_details.Status.IsFinal()" Style="padding: 20px" OnClick="() => Approve()" Raised="true" Icon="check">Согласовать</MatButton>
            </div>
            <div class="col-md-8">
                <MatButton Disabled="@_details.Status.IsFinal()" Style="padding: 20px" OnClick="() => Reject()" Raised="true" Icon="close">Отклонить</MatButton>
            </div>
        </div>
    }
</div>

@code {

    [Parameter]
    public long ApplicationId { get; set; }


    private FullApplicationApiModel? _details;
    private ApplicationApproverApiModel[]? _approvers;
    private bool _isApprover = false;

    protected override async Task OnInitializedAsync()
    {
        _details = await _httpClient.GetFromJsonAsync<FullApplicationApiModel>(
            new Uri(_approvalsApiOptions.Address, $"api/v1/application/{ApplicationId}"));
        _approvers = await _httpClient.GetFromJsonAsync<ApplicationApproverApiModel[]>(
            new Uri(_approvalsApiOptions.Address, $"api/v1/applicationapprover/{ApplicationId}"));

        var userId = await GetCurrentUserId();
        if (userId is not null
            && _approvers?.Any(x => x.User.Id == userId && x.Status == ApplicationApproverStatus.New) == true)
            _isApprover = true;
    }

    private async Task<long?> GetCurrentUserId()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var userIdStr = authState.User.FindFirst(AoClaimNames.UserId)?.Value;

        if (long.TryParse(userIdStr, out var userId))
            return userId;

        return null;
    }

    private async Task Approve()
    {
        var resp = await _httpClient.PutAsync(
            new Uri(_approvalsApiOptions.Address, $"api/v1/applicationapprover/{ApplicationId}/approve"),
            default!);
        var error = await resp.Validate();
        if (error is not null)
        {
            _toaster.Add(error.Message, MatToastType.Danger);
            return;
        }

        _toaster.Add("Заявление было согласовано", MatToastType.Success);
        _navigation.NavigateTo(_navigation.BaseUri);
    }

    private async Task Reject()
    {
        var resp = await _httpClient.PutAsync(
            new Uri(_approvalsApiOptions.Address, $"api/v1/applicationapprover/{ApplicationId}/reject"),
            default!);
        var error = await resp.Validate();
        if (error is not null)
        {
            _toaster.Add(error.Message, MatToastType.Danger);
            return;
        }

        _toaster.Add("Заявление было отклонено", MatToastType.Success);
        _navigation.NavigateTo(_navigation.BaseUri);
    }

}
